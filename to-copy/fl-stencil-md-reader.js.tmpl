const glob = require('glob-promise');
const fs = require('fs');
const pathDivider = process.platform === 'win32' ? '\\' : '/';
const patternReadmes = `.${pathDivider}src${pathDivider}components${pathDivider}**${pathDivider}*.md`;
const patternReadmesBck = `.${pathDivider}src${pathDivider}components${pathDivider}**${pathDivider}*.bck`;

if (process.argv.indexOf('--keep-saved') > -1) {
  glob(patternReadmes).then((matches) => {
    if (matches && matches.length > 0) {
      matches.map(match => {
        const readme = fs.readFileSync(match, 'UTF-8');
        fs.writeFileSync(match.replace('readme.md', 'readme.bck'), readme);
      });
    }
  }).catch(err => {
    console.error('EXITING', err);
    process.exit;
  })
} else {
  glob(patternReadmes).then(matches => {
    return glob(patternReadmesBck).then((matchesBck) => {
      return {
        matches: matches,
        matchesBck: matchesBck
      }
    }).catch(err => {
      console.error('ERR_BCK', err);
      return {
        matches: matches,
        matchesBck: null
      }
    });
  }).then((data) => {
    const matches = data.matches;
    const matchesBck = data.matchesBck;
    if (matches && matches.length > 0) {
      const json = {};
      matches.map(match => {
        let bck = null;
        if (matchesBck && matchesBck.length > 0 && fs.existsSync(match.replace('readme.md', 'readme.bck'))) {
          bck = fs.readFileSync(match.replace('readme.md', 'readme.bck'), 'UTF-8');
          fs.writeFileSync(match, bck);
          fs.unlinkSync(match.replace('readme.md', 'readme.bck'))
        }
        const array = match.split(`${pathDivider}`);
        const name = array[array.length - 2];
        const readme = fs.readFileSync(match, 'UTF-8');
        json[name] = {
          md: readme,
          name: name,
        };
      });
      fs.writeFileSync(
        `.${pathDivider}src${pathDivider}assets${pathDivider}mocks${pathDivider}readmes.json`,
        JSON.stringify(json),
      );
    }
  }).catch(err => {
    console.error('EXITING', err);
    process.exit;
  });
}
